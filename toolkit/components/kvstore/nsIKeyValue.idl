#include "nsISimpleEnumerator.idl"
#include "nsISupports.idl"
#include "nsIVariant.idl"

/**
 * The nsIKeyValue* interfaces provide a simple, synchronous API to a key/value
 * storage engine.  Basic put/get/has/delete operations are supported, as is
 * enumeration of key/value pairs and the use of multiple named databases within
 * a single storage file.  Operations have ACID semantics.
 *
 * This API does not (yet) support asynchronous operations, so it MUST NOT
 * BE USED from the main thread (i.e. by JavaScript in the parent process).
 * Implementation of an async variant of this API that is appropriate for JS
 * in the main thread is tracked by bug 1499237.
 *
 * This API does not (yet) support transactions, so it will not be appropriate
 * for all use cases.  Extension of this API to support transactions is tracked
 * by bug 1499238.
 */

[scriptable, uuid(bc37b06a-23b5-4b32-8281-4b8479601c7e)]
interface nsIKeyValuePair : nsISupports {
    readonly attribute AUTF8String key;
    readonly attribute nsIVariant value;
};

[scriptable, uuid(0c17497a-ccf8-451a-838d-9dfa7f846379)]
interface nsIKeyValueCallback : nsISupports {
    void handleResult(in nsISupports result);
    void handleError(in nsresult message);
};

[scriptable, uuid(c449398e-174c-425b-8195-da6aa0ccd9a5)]
interface nsIKeyValueDatabase : nsISupports {
    void putAsync(
        in nsIKeyValueCallback callback,
        in AUTF8String key,
        in nsIVariant value
    );

    void put(in AUTF8String key, in nsIVariant value);
    boolean has(in AUTF8String key);
    nsIVariant get(in AUTF8String key, [optional] in nsIVariant defaultValue);
    void delete(in AUTF8String key);

    /**
     * An alternative implementation of getters that specify their expected
     * return type, which enables us to enforce those expectations by returning
     * an error if the retrieved value isn't of the specified type.
     */
    long long getInt(in AUTF8String key, in long long defaultValue);
    double getDouble(in AUTF8String key, in double defaultValue);
    AUTF8String getString(in AUTF8String key, in AUTF8String defaultValue);
    boolean getBool(in AUTF8String key, in boolean defaultValue);

    /**
     * Enumerate (key, value) pairs.  If you specify a "from" key,
     * then enumeration starts at the first key equal to or greater than
     * (lexicographically) the specified key.  And if you specify a "to" key,
     * then enumeration ends at the first key less than or equal to it.
     */
    nsISimpleEnumerator enumerate([optional] in AUTF8String fromKey,
                                  [optional] in AUTF8String toKey);
};

[scriptable, uuid(2cbb5567-cac9-4da0-8a67-9635ab7428e8)]
interface nsIAsyncKeyValueDatabase : nsISupports {
    void put(in AString key, in nsIVariant value, in nsIKeyValueCallback callback);
    void has(in AString key, in nsIKeyValueCallback callback);
    void get(in AString key, in nsIKeyValueCallback callback, [optional] in nsIVariant defaultValue);
    void delete(in AString key, in nsIKeyValueCallback callback);
    void enumerate(in nsIKeyValueCallback callback, [optional] in AString fromKey);
};

[scriptable, uuid(46c893dd-4c14-4de0-b33d-a1be18c6d062)]
interface nsIKeyValueService : nsISupports {
    /**
     * Get a handle to the key/value database at the given path and optionally
     * with the given name, creating the database if necessary.
     *
     * There can be multiple key/value databases for a given path, which share
     * the database files.  If you don't specify a name, then this method
     * will retrieve a handle to the "default" (unnamed) database.
     *
     * It isn't a good idea to use both named and unnamed databases in the same
     * path, as the underlying implementation stores information about the named
     * databases in the default database.  So if you need multiple databases,
     * then give them all names!
     */
    nsIKeyValueDatabase getOrCreate(
        in AUTF8String path,
        [optional] in AUTF8String name
    );

    void getOrCreateAsync(
        in nsIKeyValueCallback callback,
        in AUTF8String path,
        [optional] in AUTF8String name
    );
};
