#include "nsISupports.idl"
#include "nsIVariant.idl"

/**
 * The nsIKeyValue* interfaces provide a simple, asynchronous API to a key/value
 * storage engine.  Basic put/get/has/delete operations are supported, as is
 * enumeration of key/value pairs and the use of multiple named databases within
 * a single storage file.  Operations have ACID semantics.
 *
 * This API does not (yet) support transactions, so it will not be appropriate
 * for all use cases.  Extension of this API to support transactions is tracked
 * by bug 1499238.
 */

[scriptable, uuid(bc37b06a-23b5-4b32-8281-4b8479601c7e)]
interface nsIKeyValuePair : nsISupports {
    readonly attribute AUTF8String key;
    readonly attribute nsIVariant value;
};

[scriptable, uuid(0c17497a-ccf8-451a-838d-9dfa7f846379)]
interface nsIKeyValueVoidCallback : nsISupports {
    void handleResult();
    void handleError(in AUTF8String message);
};

[scriptable, uuid(50f65485-ec1e-4307-812b-b8a15e1f382e)]
interface nsIKeyValuePairCallback : nsISupports {
    void handleResult(in AUTF8String key, in nsIVariant value);
    void handleError(in AUTF8String message);
};

[scriptable, uuid(174ebfa1-74ea-42a7-aa90-85bbaf1da4bf)]
interface nsIKeyValueVariantCallback : nsISupports {
    void handleResult([optional] in nsIVariant result);
    void handleError(in AUTF8String message);
};

[scriptable, uuid(b9ba7116-b7ff-4717-9a28-a08e6879b199)]
interface nsIKeyValueEnumerator : nsISupports {
    void hasMoreElementsAsync(in nsIKeyValueVariantCallback callback);
    void getNextAsync(in nsIKeyValuePairCallback callback);
};

[scriptable, uuid(b7ea2183-880b-4424-ab24-5aa1555b775d)]
interface nsIKeyValueEnumeratorCallback : nsISupports {
    void handleResult(in nsIKeyValueEnumerator enumerator);
    void handleError(in AUTF8String message);
};

[scriptable, uuid(c449398e-174c-425b-8195-da6aa0ccd9a5)]
interface nsIKeyValueDatabase : nsISupports {
    void put(
        in nsIKeyValueVoidCallback callback,
        in AUTF8String key,
        in nsIVariant value);

    void has(
        in nsIKeyValueVariantCallback callback,
        in AUTF8String key);

    void get(
        in nsIKeyValueVariantCallback callback,
        in AUTF8String key,
        [optional] in nsIVariant defaultValue);

    void delete(
        in nsIKeyValueVoidCallback callback,
        in AUTF8String key);

    void enumerate(
        in nsIKeyValueEnumeratorCallback callback,
        [optional] in AUTF8String fromKey,
        [optional] in AUTF8String toKey);
};

[scriptable, uuid(2becc1f8-2d80-4b63-92a8-24ee8f79ee45)]
interface nsIKeyValueDatabaseCallback : nsISupports {
    void handleResult(in nsIKeyValueDatabase database);
    void handleError(in AUTF8String message);
};

[scriptable, uuid(46c893dd-4c14-4de0-b33d-a1be18c6d062)]
interface nsIKeyValueService : nsISupports {
    void getOrCreate(
        in nsIKeyValueDatabaseCallback callback,
        in AUTF8String path,
        [optional] in AUTF8String name
    );
};
